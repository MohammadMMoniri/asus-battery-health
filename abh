# License: https://github.com/sakibulalikhan/asus-battery-health/blob/main/LICENSE
# GitHub: https://github.com/sakibulalikhan/asus-battery-health

#!/bin/bash

# Print script header
cat << "EOF"

┏┓      ┳┓            ┓┏    ┓ ┓
┣┫┏┓┏┏  ┣┫┏┓╋╋┏┓┏┓┓┏  ┣┫┏┓┏┓┃╋┣┓
┛┗┛┗┻┛  ┻┛┗┻┗┗┗ ┛ ┗┫  ┛┗┗ ┗┻┗┗┛┗
                   ┛ @sakibulalikhan

EOF

# Set the default charge threshold to 60%
CHARGE_THRESHOLD=60
VERBOSE_MODE=false

# Display help message
display_help() {
  echo "Usage: $0 [-t <charge_threshold>] [-r] [-v] [-h]"
  echo "Options:"
  echo "  -t <charge_threshold>  Set the charge threshold (default: 60)"
  echo "  -r                     Remove the charge threshold"
  echo "  -v                     Enable verbose mode"
  echo "  -h                     Display this help message"
  exit 0
}

# Check if any arguments were provided
if [ $# -eq 0 ]; then
  display_help
fi

# Function for logging
log_message() {
  TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
  echo "$TIMESTAMP $1"
}

# Parse command-line arguments
while getopts ":t:rvh" opt; do
  case ${opt} in
    t )
      case $OPTARG in
        60|80|100)
          CHARGE_THRESHOLD=$OPTARG
          ;;
        *)
          log_message "Error: Charge threshold must be 60, 80, or 100. (Recomended by Asus Battery Healh!)" >&2
          exit 1
          ;;
      esac
      ;;
    r )
      REMOVE_THRESHOLD=true
      ;;
    v )
      VERBOSE_MODE=true
      ;;
    h )
      display_help
      ;;
    \? )
      echo "Invalid option: -$OPTARG" >&2
      display_help
      ;;
  esac
done

# Determine the battery name
BATTERY_NAME=$(ls /sys/class/power_supply | grep "BAT")
if [ -z "$BATTERY_NAME" ]; then
  log_message "Error: Battery name not found. Exiting."
  exit 1
fi

# Function to display verbose messages
verbose() {
  if [ "$VERBOSE_MODE" = true ]; then
    log_message "$1"
    if [ "$1" == "Systemd service status:" ]; then
      echo
      sudo systemctl status asus-battery-health.service --no-pager
    fi
  fi
}

if [ -n "$REMOVE_THRESHOLD" ]; then
  # Remove the charge threshold
  verbose "Removing the charge threshold..."
  if echo 100 | sudo tee /sys/class/power_supply/$BATTERY_NAME/charge_control_end_threshold > /dev/null; then
    verbose "Charge threshold removed successfully."
  else
    log_message "Error: Failed to remove the charge threshold."
    exit 1
  fi

  # Remove the systemd service
  verbose "Disabling systemd service..."
  if sudo systemctl disable asus-battery-health.service > /dev/null && \
     sudo systemctl stop asus-battery-health.service > /dev/null && \
     sudo rm /etc/systemd/system/asus-battery-health.service > /dev/null; then
    verbose "Systemd service disabled successfully."
  else
    log_message "Error: Failed to disable the systemd service."
    exit 1
  fi

  echo "Asus Battery Health Charging has been disabled."
else
  # Set the charge threshold
  verbose "Setting the charge threshold to $CHARGE_THRESHOLD%..."
  echo $CHARGE_THRESHOLD | sudo tee /sys/class/power_supply/$BATTERY_NAME/charge_control_end_threshold > /dev/null

  # Create a systemd service to make the change permanent
  verbose "Creating systemd service..."
  sudo tee /etc/systemd/system/asus-battery-health.service > /dev/null << EOF
[Unit]
Description=Asus Battery Health Charging
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
ExecStart=/bin/bash -c "echo $CHARGE_THRESHOLD > /sys/class/power_supply/$BATTERY_NAME/charge_control_end_threshold"

[Install]
WantedBy=multi-user.target
EOF

  verbose "Enabling systemd service..."
  sudo systemctl enable asus-battery-health.service > /dev/null
  sudo systemctl start asus-battery-health.service > /dev/null

  log_message "Asus Battery Health Charging has been enabled with a charge threshold of $CHARGE_THRESHOLD%."
  verbose "Systemd service status:"
fi
